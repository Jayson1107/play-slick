<#-- Template for autogenerated tuple handling file -->
package util
/**
 * tuple helpers for safely adding and matching elements
 */
package object tuples{
    // first element extractor
    object +:{
<#list 2..22 as i>
      def unapply[<#list 1..i as j>T${j}<#if i != j>,</#if></#list>](t: Tuple${i}[<#list 1..i as j>T${j}<#if i != j>,</#if></#list>]) = Some( t._1, Tuple${i-1}(<#list 2..i as j>t._${j}<#if i != j>,</#if></#list>) )
</#list>
    }
    // last element extractor
    object :+{
<#list 2..22 as i>
      def unapply[<#list 1..i as j>T${j}<#if i != j>,</#if></#list>](t: (<#list 1..i as j>T${j}<#if i != j>,</#if></#list>)) = Some( (Tuple${i-1}(<#list 1..i-1 as j>t._${j}<#if i-1 != j>,</#if></#list>),t._${i}) )
</#list>
    }
    // append and prepend extension methods
    implicit def tuple1Append(a: Any) = new{
      def :+[E]( e:E ) = Tuple2(a,e)
      def +:[E]( e:E ) = Tuple2(e,a)
    }
<#list 1..21 as i>
    implicit def tuple${i}Append[<#list 1..i as j>T${j}<#if i != j>,</#if></#list>](t: Tuple${i}[<#list 1..i as j>T${j}<#if i != j>,</#if></#list>]) = new{
      def :+[E]( e:E ) = Tuple${i+1}(<#list 1..i as j>t._${j},</#list>e)
      def +:[E]( e:E ) = Tuple${i+1}(e<#list 1..i as j>,t._${j}</#list>)
    }
</#list>
<#list 1..22 as i>
    implicit def tuple${i}Lift[<#list 1..i as j>T${j}<#if i != j>,</#if></#list>](t: Tuple${i}[<#list 1..i as j>Option[T${j}]<#if i != j>,</#if></#list>]) = new{
      def liftOption = t match {
        case Tuple${i}(<#list 1..i as j>Some(_${j})<#if i != j>,</#if></#list>) => Some(Tuple${i}(<#list 1..i as j>_${j}<#if i != j>,</#if></#list>))
        case _ => None
      }
    }
</#list>
}
